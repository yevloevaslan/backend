type Query {
    users(_id: String, pagination: paginationParams): [User],
    usersCount: Int,
    tasks(type: String!, query: TasksQuery, pagination: paginationParams): TaskListResult,
    aboutProject: AboutProjectResult
}

type Mutation {
    updateUser(_id: String, data: UpdateUserData!): Boolean,
    createTask(taskData: TaskCreateData!): Boolean,
    updateTask(_id: String!, taskData: TaskUpdateData!): Boolean
    deleteTask(_id: String!): Boolean
    updateAboutProject(aboutProject: AboutProjectInput, aboutAuthor: AboutAuthorInput): Boolean
}

input TasksQuery {
    _id: String
}

input AboutProjectInput {
    description: String,
    photos: [String]
}

input AboutAuthorInput {
    description: String,
    photos: [String]
}

input paginationParams {
    limit: Int,
    page: Int
}

input TaskUpdateData {
    title: String,
    description: String,
    level: String,
    points: Int,
    params: params,
    active: Boolean
}

input TaskCreateData {
    title: String!,
    description: String!,
    type: String!,
    level: String!,
    points: Int!,
    params: params!,
    active: Boolean!
}

input params {
    answers: [String],
    photos: [String],
    sound: String,
    text: String,
    answer: String!
}

input UpdateUserData {
    phone: String,
    firstName: String,
    lastName: String,
    middleName: String,
    birthday: String,
    sex: sex,
    email: String,
}

type AboutProjectResult {
    project: aboutProjectBlock
    author: aboutProjectBlock
}

type aboutProjectBlock {
    photos: [String],
    description: String,
}

type TaskListResult {
    list: [Task],
    meta: TaskListResultMeta
}

type TaskListResultMeta {
    count: Int
}

type Task {
    _id: ID,
    title: String!,
    description: String!,
    type: String!,
    level: String!,
    points: Int!,
    params: paramsType
}

type paramsType {
    answers: [String],
    photos: [String],
    sound: String,
    text: String,
    answer: String!
}

type User {
    _id: ID,
    phone: String,
    firstName: String,
    lastName: String,
    middleName: String,
    score: Int,
    birthday: String,
    sex: sex,
    email: String,
    createdAt: String,
    updatedAt: String
}

enum sex {
    f
    m
}

